version: "3.1"
services:

  web-frontend:
    container_name: web
    build:
      context: ./web
    ports:
      - 80:3000
    environment:
      FILE_SERVER: file-server
      FILE_SERVER_TOKEN: ${FILE_SERVER_TOKEN}
      MESSAGE_BROKER: rabbitmq
      MESSAGE_QUEUE: stage1
    links:
      - file-server
      - rabbitmq
      - upload
      - results
      - engine

  file-server:
    container_name: file-server
    image: mayth/simple-upload-server:latest
    volumes:
      - file-storage:/var/root
    command: -token ${FILE_SERVER_TOKEN} -port 80 -upload_limit 400000000 /var/root

  weights-up:
    container_name: weights-up
    image: curlimages/curl:latest
    volumes:
      - ./models:/models
    links:
      - file-server
    command: sh -c 'for file in /models/*_weights; do echo "uploading $$file" ; curl -Ffile=@$$file "http://file-server/upload?token=${FILE_SERVER_TOKEN}"; done'

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbit-storage:/var/lib/rabbitmq/
      - rabbit-logs:/var/log/rabbitmq

  upload:
    container_name: upload
    build:
      dockerfile: ./upload/Dockerfile
      context: ./backend
    environment:
      FILE_SERVER: file-server
      FILE_SERVER_TOKEN: ${FILE_SERVER_TOKEN}
      MESSAGE_BROKER: rabbitmq
      QUEUE: stage1
    ports:
      - 3000:80
    links:
      - rabbitmq

  board_segmentation:
    container_name: board_seg
    build:
      dockerfile: ./stage/Dockerfile
      context: ./backend
    environment:
      SERVICE_TYPE: python
      MODEL_NAME: board_segmentation
      FILE_SERVER: file-server
      FILE_SERVER_TOKEN: ${FILE_SERVER_TOKEN}
      MESSAGE_BROKER: rabbitmq
      CURRENT_QUEUE: stage1
      NEXT_QUEUE: stage2
      FAIL_QUEUE: fail
    links:
      - rabbitmq
      - file-server

  piece_classification:
    container_name: piece_class
    build:
      dockerfile: ./stage/Dockerfile
      context: ./backend
    environment:
      SERVICE_TYPE: python
      MODEL_NAME: piece_classification
      FILE_SERVER: file-server
      FILE_SERVER_TOKEN: ${FILE_SERVER_TOKEN}
      MESSAGE_BROKER: rabbitmq
      CURRENT_QUEUE: stage2
      NEXT_QUEUE: stage3
      FAIL_QUEUE: fail
    links:
      - rabbitmq
      - file-server

  results:
    container_name: results
    build:
      dockerfile: ./results/Dockerfile
      context: ./backend
    environment:
      MESSAGE_BROKER: rabbitmq
      QUEUE: stage3
      FAIL_QUEUE: fail
    ports:
      - 3001:80
    links:
      - rabbitmq

  engine:
    container_name: engine
    build:
      context: ./backend/engine
    ports:
      - 3002:80
    links:
      - rabbitmq

volumes:
  file-storage:
  rabbit-storage:
  rabbit-logs:
